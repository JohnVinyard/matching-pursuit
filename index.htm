<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Matching Pursuit Demo</title>
    <style>
      body {
        font-family: sans-serif;

      }
      .events,
      .context {
        padding: 10px;
        border: solid 1px black;
      }
    </style>
    <script type="text/javascript">
      const drawEvents = (canvasElement, events) => {
        const ctx = canvasElement.getContext("2d");
        ctx.fillStyle = "rgb(0, 0, 0)";
        ctx.fillRect(0, 0, canvasElement.width, canvasElement.height);

        events.forEach(([a, b, c], index) => {
          const ratio = Math.floor(4096 / 512);
          const aDownScaled = Math.floor(a / ratio);
          ctx.fillStyle = "rgb(255, 255, 255)";
          ctx.fillRect(b, aDownScaled, 3, 3);
        });
      };

      const drawContext = (canvasElement, context) => {
        const ctx = canvasElement.getContext("2d");

        const minValue = Math.min(...context);
        const allPositive = context.map((x) => x - minValue);
        const maxValue = Math.max(...allPositive);

        allPositive.forEach((n, index) => {
          const b = Math.round((n / maxValue) * 255).toFixed(0);
          const fillStyle = `rgb(${b}, ${b}, ${b})`;
          ctx.fillStyle = fillStyle;
          const height = 16;
          const width = 16;
          const position = index * height;
          ctx.fillRect(0, position, height, width);
        });
      };

      const docReady = async () => {
        const origElements = document.querySelectorAll(".original");
        const reconElements = document.querySelectorAll(".reconstruction");
        const canvasElements = document.querySelectorAll(".events");
        const contextElements = document.querySelectorAll(".context");

        fetch("/suggestions")
          .then((resp) => resp.json())
          .then((pairs) => {
            console.log(pairs);

            pairs.forEach(({ original, reconstruction, encoding }, index) => {
              const orig = origElements.item(index);
              orig.src = original;
              const recon = reconElements.item(index);
              recon.src = reconstruction;

              fetch(encoding)
                .then((resp) => resp.json())
                .then(({ events, context }) => {
                  const cnv = canvasElements.item(index);
                  const ctxt = contextElements.item(index);
                  drawEvents(cnv, events);
                  drawContext(ctxt, context);
                });
            });
          });

        // find the audio element
        //const audioElement = document.getElementById("reconstruction");
        // get the encoding for this piece of audio
        //const resp = await fetch("/encode/1727/2000").then((resp) =>
        //  resp.json()
        //);
        // post the encoding to get base64-encoded audio
        /*
        const recon = await fetch("/synth", {
          method: "POST",
          body: JSON.stringify(resp),
          headers: {
            "Content-Type": "application/json",
          },
        }).then((resp) => resp.blob());

        const dataUrl = URL.createObjectURL(recon);

        // set the src of the audio element
        audioElement.src = dataUrl;
        */
      };
      document.addEventListener("DOMContentLoaded", docReady, false);
    </script>
  </head>

  <body>
    <h1 id="title">Sparse Interpretible Audio Model</h1>
    <ul>
      <li>
        <a href="#reconstructions-section">Reconstructions</a>
      </li>
      <li>
        <a href="#random-generation">Random Generations</a>
      </li>
    </ul>
    <p>
      Read more about the model
      <a
        href="https://johnvinyard.github.io/machine-learning/2023/11/15/sparse-physical-model.html"
        target="_blank"
        >here</a
      >.
    </p>

    <h2>Reconstructions</h2>

    <a id="reconstructions-section"></a>
    <div>
      <audio class="original" src="" controls></audio>
      <audio class="reconstruction" src="" controls></audio>
      <div>
        <h3>Context Vector</h3>
        <canvas class="context" height="256" width="16"></canvas>
      </div>
      <div>
        <h3>Sparse Events</h3>
        <canvas class="events" height="512" width="128"></canvas>
      </div>
    </div>
    <hr />

    <div>
      <audio class="original" src="" controls></audio>
      <audio class="reconstruction" src="" controls></audio>
      <div>
        <h3>Context Vector</h3>
        <canvas class="context" height="256" width="16"></canvas>
      </div>
      <div>
        <h3>Sparse Events</h3>
        <canvas class="events" height="512" width="128"></canvas>
      </div>
    </div>
    <hr />

    <div>
      <audio class="original" src="" controls></audio>
      <audio class="reconstruction" src="" controls></audio>
      <div>
        <h3>Context Vector</h3>
        <canvas class="context" height="256" width="16"></canvas>
      </div>
      <div>
        <h3>Sparse Events</h3>
        <canvas class="events" height="512" width="128"></canvas>
      </div>
    </div>
    <hr />

    <div>
      <audio class="original" src="" controls></audio>
      <audio class="reconstruction" src="" controls></audio>
      <div>
        <h3>Context Vector</h3>
        <canvas class="context" height="256" width="16"></canvas>
      </div>
      <div>
        <h3>Sparse Events</h3>
        <canvas class="events" height="512" width="128"></canvas>
      </div>
    </div>
    <hr />

    <div>
      <audio class="original" src="" controls></audio>
      <audio class="reconstruction" src="" controls></audio>
      <div>
        <h3>Context Vector</h3>
        <canvas class="context" height="256" width="16"></canvas>
      </div>
      <div>
        <h3>Sparse Events</h3>
        <canvas class="events" height="512" width="128"></canvas>
      </div>
    </div>
    <hr />

    <div>
      <audio class="original" src="" controls></audio>
      <audio class="reconstruction" src="" controls></audio>
      <div>
        <h3>Context Vector</h3>
        <canvas class="context" height="256" width="16"></canvas>
      </div>
      <div>
        <h3>Sparse Events</h3>
        <canvas class="events" height="512" width="128"></canvas>
      </div>
    </div>
    <hr />

    <div>
      <audio class="original" src="" controls></audio>
      <audio class="reconstruction" src="" controls></audio>
      <div>
        <h3>Context Vector</h3>
        <canvas class="context" height="256" width="16"></canvas>
      </div>
      <div>
        <h3>Sparse Events</h3>
        <canvas class="events" height="512" width="128"></canvas>
      </div>
    </div>
    <hr />

    <div>
      <audio class="original" src="" controls></audio>
      <audio class="reconstruction" src="" controls></audio>
      <div>
        <h3>Context Vector</h3>
        <canvas class="context" height="256" width="16"></canvas>
      </div>
      <div>
        <h3>Sparse Events</h3>
        <canvas class="events" height="512" width="128"></canvas>
      </div>
    </div>
    <hr />

    <h2>Random Generations</h2>
    <a id="random-generation"></a>
    <audio src="/random?q=a" controls></audio>
    <audio src="/random?q=b" controls></audio>
    <audio src="/random?q=c" controls></audio>
    <audio src="/random?q=d" controls></audio>
  </body>
</html>
